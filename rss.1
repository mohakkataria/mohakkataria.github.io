<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Erudition]]></title><description><![CDATA[Thoughts, learnings and wisdom of a Software Engineer.]]></description><link>https://mohakkataria.github.io/</link><generator>Ghost 0.11</generator><lastBuildDate>Mon, 19 Jun 2017 09:27:03 GMT</lastBuildDate><atom:link href="https://mohakkataria.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Rate Limiting with Nginx]]></title><description><![CDATA[Insight into how nginx can be used for API/web level rate limiting. 
By : Mohak Kataria]]></description><link>https://mohakkataria.github.io/rate-limiting-with-nginx/</link><guid isPermaLink="false">1155d120-4bc3-4724-9d1d-6c2b545ac85e</guid><category><![CDATA[nginx]]></category><category><![CDATA[devops]]></category><category><![CDATA[api]]></category><dc:creator><![CDATA[Mohak Kataria]]></dc:creator><pubDate>Sat, 10 Jun 2017 17:23:00 GMT</pubDate><media:content url="https://mohakkataria.github.io/content/images/2017/06/kibana42_apache.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://mohakkataria.github.io/content/images/2017/06/kibana42_apache.jpg" alt="Rate Limiting with Nginx"><p>Now that you have landed at this article after reading the headline, I assume that you already know what Nginx is and why is it used in front of our backend servers/services as a reverse proxying agent. Well, in case you still landed at this article without that knowledge, fret not as I am attaching a small list of resources which can help you with thatÂ :</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Reverse_proxy">Wikipedia - Reverse Proxy</a></li>
<li><a href="https://www.nginx.com/resources/glossary/reverse-proxy-server/">Nginx Docs - Reverse Proxy</a></li>
<li><a href="http://www.jscape.com/blog/bid/87783/Forward-Proxy-vs-Reverse-Proxy">Forward v/s Reverse Proxy</a></li>
</ul>

<p>So now we are at a place where we can start with the real deal of learning as to how can one use nginx for rate limiting the traffic to your website/API. This will also work even when using behind a load balancer or when nginx is being used as one, till the actual IPs are passed in headers to nginx for it to differentiate between requests from different hosts. It is useful, if your site is hammered by a bot doing multiple requests per second and thus increasing your server load. With the <code>ngx_http_limit_req_module</code> you can define a rate limit, and if a visitor exceeds this rate, he will get a 503 error. The rate limiting is performed via "<a href="https://en.wikipedia.org/wiki/Leaky_bucket">Leaky Bucket</a>" algorithm usually employed in computer networks with bandwidth limitations. </p>

<p>To start with, we first define a <code>limit_req_zone</code> in our nginx.conf as shown below. Now if you ask why is that necessary, the answer to that would be, Computer Science &amp; Logic 101 : We need to solve a problem of limiting traffic to an IP based on the traffic, but we need to know what the traffic is corresponding to every IP and then compute on the data basis our business need/logic as to when to limit the resources to that IP.</p>

<pre><code class="language-http">    http {
        limit_req_zone $binary_remote_addr zone=test:20m rate=10r/s;
        ...

        server {
            ...
</code></pre>

<p>This sets the shared memory zone with the requisite rate of requests. Here the shared memory zone is called test and is allocated 20MB of storage. Instead of the variable <code>$remote_addr</code>, we use the variable <code>$binary_remote_addr</code> which reduces the size of the state to 64 bytes. There can be about 16,000 states in a 1MB zone, so 20MB allow for about 320,000 states, so this should be enough for your visitors, but you may change it depending on how much traffic you receive. The rate is limited to ten request per second(rps). Please note that rps must be an integer values. So half a request per second should be set as 30 rps. This configuration of setting the request zone must go inside the <code>http {}</code> container.</p>

<p>After having defined a storage area to store the data, we use this to actually put rate limiting to use. This is done using the <code>limit_req</code> directive. One can use this directive in <code>http {}</code>, <code>server {}</code>, and <code>location {}</code> containers, but it is most useful in <code>location {}</code> containers that pass requests to your app servers (PHP-FPM, etc.) because otherwise, if you load a single page with lots of assets (images, CSS, and JavaScript files), you would probably exceed the given rate limit with a single page request.</p>

<p>An example directive usage is as </p>

<pre><code>        location ~ \.php$ {
                ...
                limit_req zone=test burst=10;
                ...
        }
</code></pre>

<p><br>
<code>limit_req zone=test burst=10;</code> specifies that this rate limit belongs to the session storage area we defined before in the nginx.conf. Burst is nothing but a queue which means that if you exceed the rate limit, the following requests are delayed, and only if you have more requests waiting in the queue than specified in the burst parameter, will you get a 503 error like the image shown below or any other html page which has been defined in configuration or a default one by nginx :</p>

<figure>  
<img src="https://mohakkataria.github.io/content/images/2017/06/litespeed-503-error.gif" alt="Rate Limiting with Nginx">
<figcaption>Sample 503 Error Page</figcaption>  
</figure>

<p>When rate limited, the nginx error logs will produce output similar to the following:</p>

<pre>
2016/10/20 17:28:46 [error] 30347#0: *55 limiting requests, excess: 5.658 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/test/results/?keyword=" 
2016/10/20 17:28:46 [error] 30347#0: *55 limiting requests, excess: 5.273 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/test/results/?keyword=" 
2016/10/20 17:28:47 [error] 30347#0: *55 limiting requests, excess: 5.508 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/test/results/?keyword=" 
2016/10/20 17:28:47 [error] 30347#0: *55 limiting requests, excess: 5.200 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/test/results/?keyword=" 
2016/10/20 17:28:48 [error] 30347#0: *55 limiting requests, excess: 5.567 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/search/results/?keyword=" 
</pre>

<p>With this basic configuration, we have enabled rate limiting on our service. Wasn't it too simple? :)</p>

<div class="tip">  
PS : Don't forget to reload nginx after adding or making changes to configuration files for them to take effect using command :  
`sudo service nginx reload` or similar on your OS.
</div>]]></content:encoded></item></channel></rss>
