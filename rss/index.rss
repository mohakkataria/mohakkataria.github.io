<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Erudition</title><description>Thoughts, learnings and wisdom of a Software Engineer.</description><link>https://mohakkataria.github.io/</link><generator>Ghost 0.11</generator><lastBuildDate>Tue, 04 Jul 2017 07:58:40 GMT</lastBuildDate><atom:link href="https://mohakkataria.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>The Curious Case of "tcp_tw_recycle"</title><description>This post describes the use and harmful effects of enabling `tcp_tw_recycle` on linux machines. By : Mohak Kataria</description><link>https://mohakkataria.github.io/the-curious-case-of-tcp_tw_recycle/</link><guid isPermaLink="false">42f50cd9-1c2f-4f22-be81-8901ce3c3bde</guid><category>devops</category><category>tcp</category><category>zomato</category><category>networking</category><category>freecharge</category><dc:creator>Mohak Kataria</dc:creator><pubDate>Tue, 04 Jul 2017 07:42:02 GMT</pubDate><media:content url="https://mohakkataria.github.io/content/images/2017/07/imgonline-com-ua-progressivek4qnsHRzcSC0.jpg" medium="image"/><content:encoded>&lt;div class="preface"&gt;  
&lt;div class="tip"&gt;  
    &lt;mark&gt;TL;DR:&lt;/mark&gt; do not enable &lt;code&gt;net.ipv4.tcp_tw_recycle&lt;/code&gt;.
&lt;/div&gt;  

&lt;img src="https://mohakkataria.github.io/content/images/2017/07/imgonline-com-ua-progressivek4qnsHRzcSC0.jpg" alt="The Curious Case of "tcp_tw_recycle""&gt;&lt;p&gt;If you have information regarding &lt;code&gt;TCP&lt;/code&gt; states, then this article may be of use to you specifically if you are trying to debug an issue with dropped/timeout traffic involving &lt;code&gt;NAT&lt;/code&gt; devices on cloud or own infrastructure alike. But if you are still not conversant with TCP much, read &lt;a href="https://mohakkataria.github.io/tcp-connection-101/"&gt;Part-1&lt;/a&gt; of this article which touches on the basics. &lt;br&gt;
&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So this incident happened while my time (~November, 2016) at &lt;code&gt;Zomato&lt;/code&gt; and we had enabled third party integrations for wallet based payment with &lt;code&gt;FreeCharge&lt;/code&gt; for &lt;code&gt;Zomato Order&lt;/code&gt;. I was looking after Payments@Zomato back then. We were having a setup wherein a lot(300+ per minute) of outbound connections, mostly wallet balance polling API calls to FreeCharge servers are made to update the Current Balance of a User Active on Zomato App in Online Ordering Flow. And we have a NAT device for all outbound traffic from our payment servers. So there are supposed to be  many TIME_WAIT sockets left in the system of active closer, as I described in my &lt;a href="https://mohakkataria.github.io/tcp-connection-101/"&gt;last post&lt;/a&gt; at any given time. Now in our case, FreeCharge was the active closer, and was dropping incoming connections from us  randomly, out of the 300+ calls we made to them every minute.&lt;/p&gt;

&lt;p&gt;Now there a lot of guides/posts available on internet on tuning systems to allow for higher throughput which also involve changing &lt;code&gt;sysctl&lt;/code&gt; configuration changes. And many of those guides would tell you to change the values of &lt;code&gt;tcp_tw_recycle&lt;/code&gt; and &lt;code&gt;tcp_tw_reuse&lt;/code&gt; to 1.&lt;/p&gt;

&lt;p&gt;Now, the Linux kernel documentation is not very helpful about what &lt;code&gt;net.ipv4.tcp_tw_recycle&lt;/code&gt; does:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enable fast recycling &lt;code&gt;TIME-WAIT&lt;/code&gt; sockets. Default value is 0. It should not be changed without advice/request of technical experts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;net.ipv4.tcp_tw_reuse&lt;/code&gt; is a little bit more documented but the language is near about the same:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Allow to reuse &lt;code&gt;TIME-WAIT&lt;/code&gt; sockets for new connections when it is safe from protocol viewpoint. Default value is 0. It should not be changed without advice/request of technical experts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The direct result of lack of documentation or information about the uses/drawbacks of changing such configuration values is that we find numerous tuning guides advising to set both these settings to 1 to reduce the number of entries in the &lt;code&gt;TIME-WAIT&lt;/code&gt; state. However, &lt;a href="https://linux.die.net/man/7/tcp"&gt;tcp(7)&lt;/a&gt; manual page states the issue about &lt;code&gt;net.ipv4.tcp_tw_recycle&lt;/code&gt; option clearly which is a problem hard to detect and waiting to bite you :  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enable fast recycling of &lt;code&gt;TIME-WAIT&lt;/code&gt; sockets. Enabling this option is not recommended since this causes problems when working with NAT (Network Address Translation).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://mohakkataria.github.io/content/images/2017/06/img_6690.png" alt="The Curious Case of "tcp_tw_recycle"" title=""&gt;  &lt;/p&gt;

&lt;p&gt;So let's try to understand the problem now and try to correct other people on Internet. :)&lt;/p&gt;

&lt;h3 id="whatistcp_tw_recycleusedfor"&gt;What is &lt;code&gt;tcp_tw_recycle&lt;/code&gt; used for ?&lt;/h3&gt;

&lt;p&gt;There are mainly two reasons of using this option :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While &lt;code&gt;tcp_tw_recycle&lt;/code&gt; option significantly shortens the length of time that a socket must stay in the &lt;code&gt;TIME_WAIT&lt;/code&gt; state. But as we know from &lt;code&gt;TCP&lt;/code&gt; Connection lifecycle, a socket in the &lt;code&gt;TIME_WAIT&lt;/code&gt; state is unable to accept a new connection until the &lt;code&gt;TIME_WAIT&lt;/code&gt; period expires. Too many sockets in &lt;code&gt;TIME_WAIT&lt;/code&gt; on a busy server can eventually cause &lt;mark&gt;port exhaustion&lt;/mark&gt;, preventing any new connections from being formed until some of the &lt;code&gt;TIME_WAIT&lt;/code&gt; periods expire.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tcp_tw_recycle&lt;/code&gt; is able to provide the same protection which &lt;code&gt;TIME_WAIT&lt;/code&gt; offers by making use of &lt;mark&gt;TCP Timestamps&lt;/mark&gt;, specified in &lt;a href="https://www.ietf.org/rfc/rfc1323.txt"&gt;RFC 1323&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, the active closer remembers the last timestamp value sent by the &lt;mark&gt;client’s IP address&lt;/mark&gt;. If a new connection is received where the TCP timestamp is larger than the last recorded timestamp, then we can be sure that the packet is new, not an old duplicate. If the packet has a Timestamp value older than the last noted, then we can safely assume that the packet is from an old connection and should be deemed to be dropped. Technically, &lt;a href="https://tools.ietf.org/html/rfc1122"&gt;RFC 1122&lt;/a&gt; states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a connection is closed actively, it MUST linger in &lt;code&gt;TIME_WAIT&lt;/code&gt; state for a time &lt;code&gt;2*MSL&lt;/code&gt; (Maximum Segment Lifetime). However, it MAY accept a new &lt;code&gt;SYN&lt;/code&gt; &gt; from the remote TCP to reopen the connection directly from &lt;code&gt;TIME_WAIT&lt;/code&gt; state, if it:&lt;/p&gt;
  
  &lt;p&gt;(1) assigns its initial sequence number for the new connection to be larger than the largest sequence number it used on the previous connection incarnation, and&lt;/p&gt;
  
  &lt;p&gt;(2) returns to &lt;code&gt;TIME_WAIT&lt;/code&gt; state if the &lt;code&gt;SYN&lt;/code&gt; turns out to be an old duplicate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="thefeudofnatwithtcp_tw_recycle"&gt;The feud of NAT with &lt;code&gt;tcp_tw_recycle&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;As highlighted in previous section, the last seen timestamp is recorded per IP address. Now when multiple client machines are behind a &lt;code&gt;NAT&lt;/code&gt;, it can pose a serious trouble, since all of them will have same source IP from server's point of view.&lt;/p&gt;

&lt;p&gt;Moreover, TCP timestamp values are generated pseudo-randomly, so each device on the network will have a different timestamp value which can lead to some devices behind a shared IP address passing the &lt;code&gt;tcp_tw_recycle&lt;/code&gt; test and others failing and being unable to connect. So, at the end it's all random, which somehow happened to be our case too, wherein out of the two machines which were behind the NAT device, requests from either of them C would fail in random fashion. To explain all this is a simple manner, let us consider the following example :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client 1 and 2 are behind a firewall with NAT.&lt;/li&gt;
&lt;li&gt;Client 1 makes a successful web request to a WebServer A which has &lt;code&gt;tcp_tw_recycle&lt;/code&gt; enabled. Note, that since NAT is enabled, for WebServer A, the request seem to come from Source IP of A, instead of either of client.&lt;/li&gt;
&lt;li&gt;Let's say WebServer actively closes the connection after sending the necessary data. So the socket in question changes out of &lt;code&gt;TIME_WAIT&lt;/code&gt; state and takes a note of the last TCP Timestamp it received from &lt;code&gt;NAT&lt;/code&gt; device IP(since Client 1's IP is NAT'ed by the &lt;code&gt;NAT&lt;/code&gt; device).&lt;/li&gt;
&lt;li&gt;Now, if Client 2 tries to connect to the WebServer A by sending a &lt;code&gt;SYN&lt;/code&gt; packet, and if its TCP timestamp value happens to be smaller than Client 1’s, the Timestamp value is compared to the previously seen timestamp by the WebServer A and on seeing that the new timestamp is smaller than the previous one, the &lt;mark&gt;&lt;code&gt;SYN&lt;/code&gt; is dropped&lt;/mark&gt;.&lt;/li&gt;
&lt;li&gt;Client 2 is unable to communicate with the WebServer until the &lt;code&gt;TIME_WAIT&lt;/code&gt; period expires.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="howtofixit"&gt;How to fix it?&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sysctl net.ipv4.tcp_tw_recycle
net.ipv4.tcp_tw_recycle = 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify the value for the configuration in the file to 0. You need to have root access to do that.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /etc/sysctl.conf | grep tcp_tw_recycle
net.ipv4.tcp_tw_recycle = 0

$ sysctl -p /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;Since packets are dropped, the client is actually waiting for a response back until it times-out. And that is the same thing which was happening with us particularly. Random requests would start timing out and the problem would get fixed on its own after few seconds. And when we reached out to FreeCharge's team, they were unable to trace any calls to their application during that window, since the request never the application at the backend of the WebServer, the &lt;code&gt;SYN&lt;/code&gt; packets were just being dropped. After careful research and help from Shrey Sinha(Head of Infrastructure @ Zomato) and FreeCharge's team, we were able to get the problem fixed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Reading :&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://slashtwentyfour.net/2016-09-24-tcp_tw_recycle-dangers/"&gt;http://slashtwentyfour.net/2016-09-24-tcp_tw_recycle-dangers/&lt;/a&gt; - The article also mentions about a script which the author wrote to find the number broken servers on internet with such issue.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://vincent.bernat.im/en/blog/2014-tcp-time-wait-state-linux"&gt;https://vincent.bernat.im/en/blog/2014-tcp-time-wait-state-linux&lt;/a&gt; - This article also mentions about the effects and use of &lt;code&gt;tcp_tw_reuse&lt;/code&gt; on client and server end.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title>TCP Connection 101</title><description>A concise documentation on TCP Connection States. By : Mohak Kataria</description><link>https://mohakkataria.github.io/tcp-connection-101/</link><guid isPermaLink="false">0082b9a5-0f37-4eec-b9f8-31e8dd0f9600</guid><category>devops</category><category>tcp</category><category>zomato</category><dc:creator>Mohak Kataria</dc:creator><pubDate>Fri, 23 Jun 2017 11:29:00 GMT</pubDate><content:encoded>&lt;p&gt;You must have heard of TCP somewhere or the other if you have been engaged with API development and have basic knowledge as to how the code you write works on the web. But the deeper knowledge is how the data for request and the response is transferred across servers. Well Transmission Control Protocol a.k.a. TCP comes to rescue. For those well versed with &lt;a href="https://en.wikipedia.org/wiki/OSI_model"&gt;OSI model&lt;/a&gt;, it is a protocol for Transport Layer. Nearly every Internet-connected device “talks” TCP and the whole Internet relies on it.&lt;/p&gt;

&lt;h3 id="tcpconnectionstates"&gt;TCP Connection States&lt;/h3&gt;

&lt;p&gt;The most common states are : &lt;code&gt;LISTEN&lt;/code&gt;, &lt;code&gt;CLOSED&lt;/code&gt; and &lt;code&gt;ESTABLISHED&lt;/code&gt;. Most of the developers don’t know and also don't need to know more about TCP states, because this is what any application really cares about. However, a lot of stuff happens behind the scenes in the lifecycle of a TCP connection.&lt;/p&gt;

&lt;p&gt;In case you want to view all the tcp connections on your system, you can use &lt;code&gt;netstat&lt;/code&gt; or &lt;code&gt;ss&lt;/code&gt; as :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ netstat -t
Active Internet connections (w/o servers)  
Proto Recv-Q Send-Q Local Address           Foreign Address         State  
tcp        0      0 localhost:49667         localhost:afs3-kaserver ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-7-233.ap-:39441 ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-1-185.ap-:54707 ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-1-25.ap-s:33442 ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-1-78.ap-s:27302 ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-7-143.ap-s:7890 ESTABLISHED  
tcp        0      0 ip-10-0-7-244.ap-:33510 ip-10-0-2-189.ap-:27017 ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-1-185.ap-:54739 ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-7-143.ap-s:7892 ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-1-78.ap-s:27118 ESTABLISHED  
tcp        0      0 ip-10-0-7-244.ap-:32902 collector-4.newre:https TIME_WAIT  
tcp        0      0 ip-10-0-7-244.ap-:57817 collector-2.newre:https TIME_WAIT  
tcp        0      0 localhost:40494         localhost:afs3-vlserver ESTABLISHED  
tcp        0      0 localhost:50019         localhost:afs3-kaserver ESTABLISHED  
tcp        0      0 ip-10-0:afs3-fileserver ip-10-0-1-78.ap-s:27304 TIME_WAIT  
...

$ss -t
State      Recv-Q Send-Q   Local Address:Port           Peer Address:Port  
ESTAB      0      0        127.0.0.1:49667              127.0.0.1:afs3-kaserver  
ESTAB      0      0        10.0.7.244:afs3-fileserver   10.0.7.233:41267  
ESTAB      0      0        10.0.7.244:afs3-fileserver   10.0.7.233:39441  
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id="connectioninitiation"&gt;Connection Initiation&lt;/h5&gt;

&lt;p&gt;Connection initiation is a &lt;mark&gt;three-way handshake&lt;/mark&gt;. Let's say that the party which initiates the connection is the client and the one that accepts the connection is the server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prerequisite : A server with a listener. The listener will listen on incoming connections on a specific port. This state is represented as &lt;code&gt;LISTEN&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The client sends a &lt;code&gt;SYN&lt;/code&gt; packet to the server and changes it's own state to  &lt;code&gt;SYN-SENT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The server will then acknowledge the &lt;code&gt;SYN&lt;/code&gt; and send a &lt;code&gt;SYN-ACK&lt;/code&gt; in response to the client. &lt;/li&gt;
&lt;li&gt;The client on receipt of &lt;code&gt;SYN-ACK&lt;/code&gt; changes its connection state to  &lt;code&gt;SYN-RECEIVED&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If everything worked properly, the client will reply with an acknowledgement &lt;code&gt;ACK&lt;/code&gt; and then the connection is marked as &lt;code&gt;ESTABLISHED&lt;/code&gt; on both end-points.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;  
&lt;img src="https://mohakkataria.github.io/content/images/2017/06/imgonline-com-ua-progressiveh5h0pu3pFm4g.jpg" alt=""&gt;
&lt;figcaption&gt;Reference : &lt;a href="https://blog.confirm.ch/tcp-connection-states/"&gt;https://blog.confirm.ch/tcp-connection-states/&lt;/a&gt;&lt;/figcaption&gt;  
&lt;/figure&gt;

&lt;h5 id="datatransfer"&gt;Data Transfer&lt;/h5&gt;

&lt;p&gt;Now the data transfer can happen between client and the server. Each party sends some data in packets and the other party responds with acknowledgement &lt;code&gt;ACK&lt;/code&gt; for the data packet received.&lt;/p&gt;

&lt;h5 id="connectiontermination"&gt;Connection Termination&lt;/h5&gt;

&lt;p&gt;Either of client or server can terminate the connection if they are finished with the data exchange or timeout happens or variety of other reasons. However, it can not be dropped because their other end-point needs to know about the termination. Terminating a connection is a &lt;mark&gt;four-way handshake&lt;/mark&gt;. And because each end-point is terminating the connection independently. It doesn’t matter which end-point starts the termination, because both of them will change their states accordingly with the information being sent to the other party about termination. Let's assume the client starts the termination.  &lt;/p&gt;

&lt;figure&gt;  
&lt;img src="https://mohakkataria.github.io/content/images/2017/06/imgonline-com-ua-progressiveAYXURwLHrBFb.jpg" alt=""&gt;
&lt;figcaption&gt;Reference : &lt;a href="https://blog.confirm.ch/tcp-connection-states/"&gt;https://blog.confirm.ch/tcp-connection-states/&lt;/a&gt;&lt;/figcaption&gt;  
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;The client sends a &lt;code&gt;FIN&lt;/code&gt; packet to the server and changes its state to  &lt;code&gt;FIN-WAIT-1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The server receives the termination request from the client and responds with an acknowledgement &lt;code&gt;ACK&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After sending the response, the server will change its state to &lt;code&gt;CLOSE-WAIT&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;As soon as the client receives this acknowledgement from the server, it will go to the &lt;code&gt;FIN-WAIT-2&lt;/code&gt; state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above process, the connection is terminated from a client point of view, the server is yet to terminate its connection. This happens right after the server sent its last &lt;code&gt;ACK&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The server is in the &lt;code&gt;CLOSE-WAIT&lt;/code&gt; state and it will independently follow up with a &lt;code&gt;FIN&lt;/code&gt;, and updates it's state to &lt;code&gt;LAST-ACK&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now the client receives the termination request and replies with an  &lt;code&gt;ACK&lt;/code&gt;, which results in a &lt;code&gt;TIME-WAIT&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;The server is now finished and changes it's connection state to &lt;code&gt;CLOSED&lt;/code&gt; immediately.&lt;/li&gt;
&lt;li&gt;The client stays in the &lt;code&gt;TIME-WAIT&lt;/code&gt; state for a maximum of four minutes (defined by RFC793 and the maximum segment lifetime, read further for more details) before setting the connection to &lt;code&gt;CLOSED&lt;/code&gt; as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id="timewait"&gt;TIME-WAIT ???&lt;/h5&gt;

&lt;p&gt;Now all this is fairly easy but there might be a question in mind that why is &lt;code&gt;TIME-WAIT&lt;/code&gt; necessary ? If both client and server are terminating the connection mutually and gracefully, why does &lt;code&gt;TIME-WAIT&lt;/code&gt; exist ?&lt;/p&gt;

&lt;p&gt;The purpose of TIME-WAIT is to prevent delayed packets from one connection being accepted by a later connection. Concurrent connections are isolated by other mechanisms, primarily by addresses, ports, and sequence numbers. When a duplicate packet from the first connection is delayed in the network and arrives at the second connection when its sequence number is in the second connection’s window, there is no way for the endpoints in the second connection to determine that the delayed packet contains data from the first connection. The situation is shown below : &lt;/p&gt;

&lt;p&gt;&lt;img src="https://mohakkataria.github.io/content/images/2017/06/fig1.svg" alt=""&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TCP avoids this condition by blocking any second connection between these address/port pairs until one can assume that all duplicates must have disappeared. &lt;/li&gt;
&lt;li&gt;Connection blocking is implemented by holding a &lt;code&gt;TIME-WAIT TCB(TCP Control Block)&lt;/code&gt; at one endpoint and checking incoming connection requests to ensure that no new connection is established between the blocked addresses and ports. &lt;/li&gt;
&lt;li&gt;The TCB is held for twice the &lt;code&gt;Maximum Segment Lifetime (MSL)&lt;/code&gt;. The MSL is defined as the longest period of time that a packet can remain undelivered in the network.&lt;/li&gt;
&lt;li&gt;Originally, the TTL field of an IP packet was the amount of time the packet could remain undelivered, but in practice the field has become a hop count. &lt;/li&gt;
&lt;li&gt;Therefore, the MSL is an estimate rather than a guarantee. Under most conditions waiting 2 x MSL is sufficient to drain duplicates, but they can and do arrive after that time. The chance of a duplicate arriving after 2 x MSL is greater if MSL is smaller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check &lt;a href="https://tools.ietf.org/html/draft-faber-time-wait-avoidance-00"&gt;this&lt;/a&gt; out for more details about the effects of TIME-WAIT on busy servers, persistent connections and avoidance techniques.&lt;/p&gt;

&lt;p&gt;I can go into more detail but that tends to be a topic of research in the field of Computer Networks and Communications. Moreover, this article is supposed to act as prequel to an article cum case study as observed during my time at &lt;code&gt;Zomato&lt;/code&gt;. Click &lt;a href="https://mohakkataria.github.io/the-curious-case-of-tcp_tw_recycle"&gt;here&lt;/a&gt; to read the next article on &lt;code&gt;The Curious Case of "tcp_tw_recycle"&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title>Rate Limiting with Nginx</title><description>Insight into how nginx can be used for API/web level rate limiting. 
By : Mohak Kataria</description><link>https://mohakkataria.github.io/rate-limiting-with-nginx/</link><guid isPermaLink="false">1155d120-4bc3-4724-9d1d-6c2b545ac85e</guid><category>nginx</category><category>devops</category><category>api</category><dc:creator>Mohak Kataria</dc:creator><pubDate>Sat, 10 Jun 2017 17:23:00 GMT</pubDate><media:content url="https://mohakkataria.github.io/content/images/2017/06/kibana42_apache.jpg" medium="image"/><content:encoded>&lt;img src="https://mohakkataria.github.io/content/images/2017/06/kibana42_apache.jpg" alt="Rate Limiting with Nginx"&gt;&lt;p&gt;Now that you have landed at this article after reading the headline, I assume that you already know what Nginx is and why is it used in front of our backend servers/services as a reverse proxying agent. Well, in case you still landed at this article without that knowledge, fret not as I am attaching a small list of resources which can help you with that :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Reverse_proxy"&gt;Wikipedia - Reverse Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/resources/glossary/reverse-proxy-server/"&gt;Nginx Docs - Reverse Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jscape.com/blog/bid/87783/Forward-Proxy-vs-Reverse-Proxy"&gt;Forward v/s Reverse Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now we are at a place where we can start with the real deal of learning as to how can one use nginx for rate limiting the traffic to your website/API. This will also work even when using behind a load balancer or when nginx is being used as one, till the actual IPs are passed in headers to nginx for it to differentiate between requests from different hosts. It is useful, if your site is hammered by a bot doing multiple requests per second and thus increasing your server load. With the &lt;code&gt;ngx_http_limit_req_module&lt;/code&gt; you can define a rate limit, and if a visitor exceeds this rate, he will get a 503 error. The rate limiting is performed via "&lt;a href="https://en.wikipedia.org/wiki/Leaky_bucket"&gt;Leaky Bucket&lt;/a&gt;" algorithm usually employed in computer networks with bandwidth limitations. &lt;/p&gt;

&lt;p&gt;To start with, we first define a &lt;code&gt;limit_req_zone&lt;/code&gt; in our nginx.conf as shown below. Now if you ask why is that necessary, the answer to that would be, Computer Science &amp;amp; Logic 101 : We need to solve a problem of limiting traffic to an IP based on the traffic, but we need to know what the traffic is corresponding to every IP and then compute on the data basis our business need/logic as to when to limit the resources to that IP.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-http"&gt;    http {
        limit_req_zone $binary_remote_addr zone=test:20m rate=10r/s;
        ...

        server {
            ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets the shared memory zone with the requisite rate of requests. Here the shared memory zone is called test and is allocated 20MB of storage. Instead of the variable &lt;code&gt;$remote_addr&lt;/code&gt;, we use the variable &lt;code&gt;$binary_remote_addr&lt;/code&gt; which reduces the size of the state to 64 bytes. There can be about 16,000 states in a 1MB zone, so 20MB allow for about 320,000 states, so this should be enough for your visitors, but you may change it depending on how much traffic you receive. The rate is limited to ten request per second(rps). Please note that rps must be an integer values. So half a request per second should be set as 30 rps. This configuration of setting the request zone must go inside the &lt;code&gt;http {}&lt;/code&gt; container.&lt;/p&gt;

&lt;p&gt;After having defined a storage area to store the data, we use this to actually put rate limiting to use. This is done using the &lt;code&gt;limit_req&lt;/code&gt; directive. One can use this directive in &lt;code&gt;http {}&lt;/code&gt;, &lt;code&gt;server {}&lt;/code&gt;, and &lt;code&gt;location {}&lt;/code&gt; containers, but it is most useful in &lt;code&gt;location {}&lt;/code&gt; containers that pass requests to your app servers (PHP-FPM, etc.) because otherwise, if you load a single page with lots of assets (images, CSS, and JavaScript files), you would probably exceed the given rate limit with a single page request.&lt;/p&gt;

&lt;p&gt;An example directive usage is as &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        location ~ \.php$ {
                ...
                limit_req zone=test burst=10;
                ...
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;code&gt;limit_req zone=test burst=10;&lt;/code&gt; specifies that this rate limit belongs to the session storage area we defined before in the nginx.conf. Burst is nothing but a queue which means that if you exceed the rate limit, the following requests are delayed, and only if you have more requests waiting in the queue than specified in the burst parameter, will you get a 503 error like the image shown below or any other html page which has been defined in configuration or a default one by nginx :&lt;/p&gt;

&lt;figure&gt;  
&lt;img src="https://mohakkataria.github.io/content/images/2017/06/litespeed-503-error.gif" alt="Rate Limiting with Nginx"&gt;
&lt;figcaption&gt;Sample 503 Error Page&lt;/figcaption&gt;  
&lt;/figure&gt;

&lt;p&gt;When rate limited, the nginx error logs will produce output similar to the following:&lt;/p&gt;

&lt;pre&gt;
2016/10/20 17:28:46 [error] 30347#0: *55 limiting requests, excess: 5.658 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/test/results/?keyword=" 
2016/10/20 17:28:46 [error] 30347#0: *55 limiting requests, excess: 5.273 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/test/results/?keyword=" 
2016/10/20 17:28:47 [error] 30347#0: *55 limiting requests, excess: 5.508 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/test/results/?keyword=" 
2016/10/20 17:28:47 [error] 30347#0: *55 limiting requests, excess: 5.200 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/test/results/?keyword=" 
2016/10/20 17:28:48 [error] 30347#0: *55 limiting requests, excess: 5.567 by zone "test", client: 10.170.2.13, server: www.example.com, request: "GET /test/results/?keyword= HTTP/1.1", host: "test-site-www.example.com", referrer: "https://test-site-www.example.com/search/results/?keyword=" 
&lt;/pre&gt;

&lt;p&gt;With this basic configuration, we have enabled rate limiting on our service. Wasn't it too simple? :)&lt;/p&gt;

&lt;div class="tip"&gt;  
PS : Don't forget to reload nginx after adding or making changes to configuration files for them to take effect using command :  
`sudo service nginx reload` or similar on your OS.
&lt;/div&gt;</content:encoded></item></channel></rss>
